<feed xmlns="http://www.w3.org/2005/Atom"> <id>https://ahnchan.github.io/</id><title>Ahnchan</title><subtitle>Ahnchan's Information Technology Blog</subtitle> <updated>2024-11-22T10:08:38+09:00</updated> <author> <name>Chanyoung Ahn</name> <uri>https://ahnchan.github.io/</uri> </author><link rel="self" type="application/atom+xml" href="https://ahnchan.github.io/feed.xml"/><link rel="alternate" type="text/html" hreflang="en-US" href="https://ahnchan.github.io/"/> <generator uri="https://jekyllrb.com/" version="4.3.4">Jekyll</generator> <rights> © 2024 Chanyoung Ahn </rights> <icon>/assets/img/favicons/favicon.ico</icon> <logo>/assets/img/favicons/favicon-96x96.png</logo> <entry><title>Install Apache Airflow on Microk8s</title><link href="https://ahnchan.github.io/posts/Install-Airflow_on_Microk8s/" rel="alternate" type="text/html" title="Install Apache Airflow on Microk8s" /><published>2023-12-01T16:00:00+09:00</published> <updated>2023-12-04T16:06:48+09:00</updated> <id>https://ahnchan.github.io/posts/Install-Airflow_on_Microk8s/</id> <content src="https://ahnchan.github.io/posts/Install-Airflow_on_Microk8s/" /> <author> <name>Chanyoung Ahn</name> </author> <category term="Platform" /> <summary> created : 2023-12-01, updated : 2023-12-01 Introduction 데이터를 주기적으로 수집하고 원하는 위치에 전달하기 위한 Workflow가 필요하다. 단순히 데이터를 수집하는 것이 아니라 수집한 데이터를 가공하고 크리닝하고 필요한 형태로 변환을 해야 한다. 스케줄에 의해서 주기적으로 수집을 해야 할 수도 있지만, 외부 요청에 의해 진행이 되어야 할 수도 있다. 이런 다양한 방법의 지원이 필요하다. Airflow는? Python 기반의 Workflow를 관리하는 Open Source이다. Data Scientist들이 Data를 수집하여 각종 전 처리 및 저장을 해야 할 때 필요하다. Airflow는 설치와 설정이 복잡하기는 하지만Data Scientist가 친숙한... </summary> </entry> <entry><title>Install JupyterHub on Microk8s</title><link href="https://ahnchan.github.io/posts/Install-Jupyterhub_on_Microk8s/" rel="alternate" type="text/html" title="Install JupyterHub on Microk8s" /><published>2023-11-16T16:00:00+09:00</published> <updated>2023-12-04T16:06:48+09:00</updated> <id>https://ahnchan.github.io/posts/Install-Jupyterhub_on_Microk8s/</id> <content src="https://ahnchan.github.io/posts/Install-Jupyterhub_on_Microk8s/" /> <author> <name>Chanyoung Ahn</name> </author> <category term="Platform" /> <summary> created : 2023-11-16, updated : 2023-11-16 Introduction 소규모로 운영되는 데이터 분석 환경을 구성한다. 단일 사용자가 아닌 여러명이 자신의 Processor, Storage를 할당받아 Jupyter Notebook을 이용하여 분석을 한다. 필요한 요소 여러명이 사용하기 위해서 필요한 요소를 정의하였다. Microk8s JupyterHub Auth0 Requirements Microk8s의 설치는 다른 Tutorial인 “Install Microk8s on Ubuntu(준비중)”를 확인하여 주기 바란다. 이 Tutorial은 Microk8s가 설치되어 있는 환경에서 JupyterHub를 설치하고 Storage를 변경하고 사용자 관리를 위해... </summary> </entry> <entry><title>Install microk8s on RedHat Enterprise 8</title><link href="https://ahnchan.github.io/posts/Install-Microk8s_RedHatEnterprise8/" rel="alternate" type="text/html" title="Install microk8s on RedHat Enterprise 8" /><published>2023-10-18T16:00:00+09:00</published> <updated>2023-10-18T16:00:00+09:00</updated> <id>https://ahnchan.github.io/posts/Install-Microk8s_RedHatEnterprise8/</id> <content src="https://ahnchan.github.io/posts/Install-Microk8s_RedHatEnterprise8/" /> <author> <name>Chanyoung Ahn</name> </author> <category term="Platform" /> <summary> created : 2023-10-18, updated : 2023-10-18 Introduction 다양한 Application을 구동하고 관리하는 부분은 쉽지가 않다. 라이브러간의 의존성도 문제이고 OS와 호환 문제도 있다. 그래서 이를 해결하기 위해 Container 기술을 사용할 수 있다. 하지만 Container만을 사용하여도 외/내부 Network, DNS등 고민할 것이 많다. 이런 상황을 해결하는 하나로 Kubernetes(k8)가 활용되고 있다. 하지만 K8s는 여러 서버를 클러스터로 묶어서 운영에 최적화 되어 있다. 소규모 서버나 저비용으로 구성을 위한 니즈도 나와서 이제는 한대의 서버나 소규모 서버를 관리할 수 있게 다양한 배포판(minkube, microk8s 등)이 나오고 있다. ... </summary> </entry> <entry><title>Apache Kafka - Quick Start</title><link href="https://ahnchan.github.io/posts/Platform-kafka-quick-start/" rel="alternate" type="text/html" title="Apache Kafka - Quick Start" /><published>2022-01-17T16:00:00+09:00</published> <updated>2024-11-15T09:29:18+09:00</updated> <id>https://ahnchan.github.io/posts/Platform-kafka-quick-start/</id> <content src="https://ahnchan.github.io/posts/Platform-kafka-quick-start/" /> <author> <name>Chanyoung Ahn</name> </author> <category term="Platform" /> <summary> created : 2022-01-17, updated : 2022-01-17 Introduction Kafka는 기존의 Message Broker 의 기능을 업그레이드하여 BigData의 분석, Pipeline 등 대용량 분산환경에서 사용할 수 있는 Opne Source 이다. 대용량, 안정성(Partitioning, Relipcation) 을 보장하고 있어 운영환경에서는 상당한 하드웨어/VM을 필요하여 나도 차일피일 사용을 미루고 있었다. 이제는 Kafka을 Cloud 환경에서 제공하는 업체(Confluent, AWS, GCP, Azure 등)가 생겨나 대용량 시스템 운영을 개발자도 할수 있기에 이제 다시 마음먹고 시작해본다. 먼저 Kafka를 Local 환경(Linux)에서 구동을 하고 Cons... </summary> </entry> <entry><title>Spring RSocket &amp; Retrosocket</title><link href="https://ahnchan.github.io/posts/Spring-RSocket/" rel="alternate" type="text/html" title="Spring RSocket &amp; Retrosocket" /><published>2021-12-13T16:00:00+09:00</published> <updated>2021-12-13T16:00:00+09:00</updated> <id>https://ahnchan.github.io/posts/Spring-RSocket/</id> <content src="https://ahnchan.github.io/posts/Spring-RSocket/" /> <author> <name>Chanyoung Ahn</name> </author> <category term="Network" /> <summary> created : 2021-12-13, updated : 2021-12-13 Introduction RSocket은 REST API, gRPC 이후에 나온 Protocol로 기존의 단점들을 보강하기 위해 Netflix에서 개발을 시작하였다. 계속 개발이 이루어지고 있는 상태고 Spring에서도 관련 개념이 정리되고 있다. 기존의 통신과 차이점은 OSI Layer 5,6 이라고 한다. 앞으로 주목해야할 Protocol이라고 생각된다. Spring RSocket은 GA가 되었고 관련해서 편하게 쓰기 위한 Retroscoket은 아직 GA가 아니다. 본 튜토리얼에서는 Spring RSocket의 동작방법과 Retrosocket의 맛배기로 보면 될 것 같다. 라이브러리 Spring Retrosocket ... </summary> </entry> </feed>
